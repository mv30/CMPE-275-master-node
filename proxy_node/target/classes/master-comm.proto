syntax = "proto3";

option java_multiple_files = true;
option java_package = "org.master.protos";
option java_outer_classname = "MasterCommDataNode";
option objc_class_prefix = "HLW";

package stream;

service Replication {

  // Methods internal to data node operation
  rpc healthPoll(DataPayload) returns (DataPayload) {}
  rpc setData(DataPayload) returns (DataPayload) {}
  rpc getData(DataPayload) returns (DataPayload) {}
  rpc removeData(DataPayload) returns (DataPayload) {}

  // Methods required for Gateway
  rpc NewNodeUpdate(NewNodeUpdateRequest) returns (NewNodeUpdateResponse) {}
  rpc GetNodeForDownload(GetNodeForDownloadRequest) returns (GetNodeForDownloadResponse) {}
  rpc GetNodeForUpload(GetNodeForUploadRequest) returns (GetNodeForUploadResponse) {}

  // Methods required for Sentinel
  rpc NodeDownUpdate(NodeDownUpdateRequest) returns (NodeDownUpdateResponse) {}
  rpc GetListOfNodes(GetListOfNodesRequest) returns (GetListOfNodesResponse) {}

  // Methods required for Node
  rpc GetNodeIpsForReplication (NodeIpsRequest) returns (NodeIpsReply) {}
  rpc UpdateReplicationStatus (ReplicationDetailsRequest) returns (ReplicationDetailsResponse) {}

  // Methods required for CLI
  rpc GetListOfFiles (GetListOfFilesRequest) returns (GetListOfFilesResponse) {}
}

enum Status {
  SUCCESS = 0;
  FAILURE = 1;
}

// The request message containing the file name.
message NodeIpsRequest {
  string filename = 1;
}

// The response message containing the node IPs
message NodeIpsReply {
  repeated string nodeips = 1;
}

// The request message containing the file name and node IPs.
message ReplicationDetailsRequest {
  string filename = 1;
  repeated string nodeips = 2;
}

// The response message containing the status
message ReplicationDetailsResponse {
  //  TODO if status of success or failure is needed, then consider adding
  //  repeated string nodeips = 1;
  Status status = 1;
}

// The request message containing the IP address of the new Node that joined the network
message NewNodeUpdateRequest {
  string newnodeip = 1;
}

message NewNodeUpdateResponse {
  string status = 1;
}

// The response message containing the generic status of an incoming request
message StatusResponse {
  Status status = 1;
}

message GetNodeForDownloadRequest {
  string filename = 1;
}

message GetNodeForDownloadResponse {
  string nodeip = 1;
}

message GetNodeForUploadRequest {
  string filename = 1;
  int64 filesize = 2; // in bytes
}

message GetNodeForUploadResponse {
  string nodeip = 1;
}

message NodeDownUpdateRequest {
  string nodeip = 1;
}

message NodeDownUpdateResponse {
  string status = 1;
}

message GetListOfFilesRequest {
  repeated string nodeips = 1;  // Send empty string to request list of files from all nodes
}

message GetListOfFilesResponse {
  repeated string filenames = 1;
}

message GetListOfNodesRequest {
  // Empty body
}

message GetListOfNodesResponse {
  repeated string nodeips = 1;
}

message DataPayload {
  string key = 1;
  repeated string values = 2;
}